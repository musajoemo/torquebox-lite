#!/usr/bin/env ruby

# Copyright 2008-2012 Red Hat, Inc, and individual contributors.
#
# This is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.

require 'fileutils'
require 'rubygems'

require 'thor'
require 'torquebox-rake-support'

class TorqueBoxLiteCommand < Thor

  default_task :start

  map "run" => "start"
  desc "run", "Run TorqueBox Lite"
  method_option 'data-directory', :type => :string, :desc => 'Override the directory TorqueBox Lite uses to store it runtime data'
  method_option 'extra', :aliases => '-e', :type => :string, :desc => 'Extra options to pass through to JBoss AS, you will need to escape dashes with \ (e.g. \--help)'
  method_option 'max-threads', :type => :numeric, :desc => "Maximum number of HTTP threads"
  method_option 'bind-address', :aliases => '-b', :type => :string, :desc => "IP address to bind to"
  method_option 'port', :aliases => '-p', :type => :numeric, :desc => "HTTP port to listen on"
  method_option 'node-name', :type => :string, :desc => 'Override the name of the node (which by default is the hostname)'
  method_option 'port-offset', :type => :numeric, :desc => 'Offset all port numbers listened on by TorqueBox Lite by this number'
  method_option 'jvm-options', :aliases => '-J', :type => :string, :desc => 'Pass options on to the JVM'
  def start
    setup_environment
    run_server(:max_threads => options['max-threads'],
               :bind_address => options['bind-address'],
               :port => options['port'],
               :port_offset => options['port-offset'],
               :pass_through => options['extra'],
               :node_name => options['node-name'],
               :data_directory => options['data-directory'],
               :jvm_options => options['jvm-options'])
  end

  no_tasks {
    def setup_environment
      ENV['TORQUEBOX_HOME'] = torquebox_home
      ENV['JBOSS_HOME'] = "#{ENV['TORQUEBOX_HOME']}/jboss"
      ENV['JRUBY_HOME'] = jruby_home
      ENV['JBOSS_OPTS'] = "-Djruby.home=#{jruby_home}"
    end

    def torquebox_home
      if ((Gem::Version.new(Gem::VERSION) <=> Gem::Version.new('1.8.9')) < 0)
        home = Gem.searcher.find('torquebox-lite')
      else
        home = Gem::Specification.find_by_name('torquebox-lite')
      end
      home.full_gem_path if home
    rescue Exception => e
      nil
    end

    def jruby_home
      File.expand_path(java.lang.System.getProperty('jruby.home'))
    end

    def run_server(options={})
      # If called from rake within a rails app, bundler will try
      # to init itself via RUBYOPT, which we don't want
      ENV.delete('RUBYOPT')

      base_dir = File.join(Dir.pwd, 'torquebox-lite')
      config_dir = File.join(TorqueBox::DeployUtils.jboss_home, 'standalone', 'configuration')
      deploy_dir = File.join(base_dir, 'deployments')
      FileUtils.mkdir_p(base_dir)
      FileUtils.mkdir_p(deploy_dir)

      opts = {:root => Dir.pwd, :dest_dir => deploy_dir}
      descriptor = TorqueBox::DeployUtils.basic_deployment_descriptor(opts)
      deployed_name = TorqueBox::DeployUtils.deploy_yaml(descriptor, opts).first
      failed_file = File.join(deploy_dir, "#{deployed_name}.failed")
      if File.exists?(failed_file)
        FileUtils.rm(failed_file)
      end

      options[:pass_through] ||= ''
      options[:pass_through] << " -Djboss.server.base.dir=#{base_dir}"
      options[:pass_through] << " -Djboss.server.config.dir=#{config_dir}"
      options[:pass_through] << " -Dtorquebox.http.port=#{options[:port]}" if options[:port]

      options[:jvm_options] ||= ''
      options[:jvm_options] << " #{strip_jvm_properties_from_jruby_opts}"

      Dir.chdir(TorqueBox::DeployUtils.jboss_home) do
        # TODO: replace .send(:jruby_opts_properties) with .jruby_opts_properties once TB 2.1.2 is out
        TorqueBox::DeployUtils.set_java_opts("#{options[:jvm_options]} #{TorqueBox::DeployUtils.send(:jruby_opts_properties)}")
        TorqueBox::DeployUtils.exec_command(TorqueBox::DeployUtils.run_command_line(options).join(' '))
      end
    end

    def strip_jvm_properties_from_jruby_opts
      jruby_opts = ENV['JRUBY_OPTS']
      return '' if jruby_opts.nil?
      jvm_properties = []
      properties = jruby_opts.split(' ')
      properties.each do |property|
        if property =~ /^-J.+/
          jvm_properties << property.sub(/-J/, '')
          ENV['JRUBY_OPTS'] = ENV['JRUBY_OPTS'].sub(property, '').strip
        end
      end
      jvm_properties.join(' ')
    end
  }
end

# TODO: remove monkey-patches below once TB 2.1.2 is out
module TorqueBox
  module DeployUtils
    class << self
      def deploy_yaml(deployment_descriptor, opts = {})
        name = normalize_yaml_name( find_option( opts, 'name' ) || deployment_name(opts[:root] || opts['root']) )
        dest_dir = opts[:dest_dir] || opts['dest_dir'] || deploy_dir
        deployment = File.join( dest_dir, name )
        File.open( deployment, 'w' ) do |file|
          YAML.dump( deployment_descriptor, file )
        end
        FileUtils.touch( dodeploy_file( name, dest_dir ) )
        [name, dest_dir]
      end

      def dodeploy_file(name, deploy_dir = DeployUtils.deploy_dir)
        File.join( deploy_dir, "#{name}" ) + ".dodeploy"
      end

      def deployed_file(name, deploy_dir = DeployUtils.deploy_dir)
        File.join( deploy_dir, "#{name}" ) + ".deployed"
      end
    end
  end
end

TorqueBoxLiteCommand.start
